!whitespace      : ' ' | '\t' | '\n' | '\r' ;
_id_chars        : 'a' - 'z'  | '_';
int              : {'0'-'9'} ;
var              : 'v''a''r''_'('a' - 'o') ;
fn_name          : 'a' - 'z' {_id_chars};
cust_fn_name     : 'f' ('1' - '9')['0'-'6'];

<<
import _rt "../runtime"
import "../token"
>>
// RETURN / Method_Call

Program          : Statements;

Variable         : var
                 | "input"
                 ;

Bool             : "true"                                               <<_rt.Bool(true), nil>>
                 | "false"                                              <<_rt.Bool(false), nil>>
                 ;

Callable_Object  : Variable                                             <<_rt.MakeGetVariable($0.(*token.Token).Lit), nil>>
                 | "(" Expression ")"                                   <<$1, nil>>
                 | Get_Index                                            <<$0, nil>>
                 | Fn_Call                                              <<$0, nil>>
                 | Lambda_Call                                          <<$0, nil>>
                 ;

Object           : Callable_Object                                      <<$0, nil>>
                 | Bool                                                 <<$0, nil>>
                 | int                                                  <<_rt.NewConstInt($0.(*token.Token).Lit)>>
                 | ListDef                                              <<$0, nil>>
                 | Method_Call                                          <<$0, nil>>
                 ;

Mult_Expr        : Mult_Expr "*" Object                                 <<_rt.MakeMul(c($0), c($2)), nil>>
                 | Mult_Expr "/" Object                                 <<_rt.MakeDiv(c($0), c($2)), nil>>
                 | Object                                               <<$0, nil>>
                 ;

Add_Expr         : Add_Expr "+" Mult_Expr                               <<_rt.MakeAdd(c($0), c($2)), nil>>
                 | Add_Expr "-" Mult_Expr                               <<_rt.MakeSub(c($0), c($2)), nil>>
                 | Mult_Expr                                            <<$0, nil>>
                 ;

Comp_Expr        : Comp_Expr ">" Add_Expr                               <<_rt.MakeGt(c($0), c($2)), nil>>
                 | Comp_Expr "<" Add_Expr                               <<_rt.MakeLt(c($0), c($2)), nil>>
                 | Comp_Expr "==" Add_Expr                              <<_rt.MakeEqual(c($0), c($2)), nil>>
                 | Comp_Expr "!=" Add_Expr                              <<_rt.MakeNotEqual(c($0), c($2)), nil>>
                 | Add_Expr                                             <<$0, nil>>
                 ;

Bool_Expr        : Bool_Expr "&&" Comp_Expr                             <<_rt.MakeAND(c($0), c($2)), nil>>
                 | Bool_Expr "||" Comp_Expr                             <<_rt.MakeOR(c($0), c($2)), nil>>
                 | Comp_Expr                                            <<$0, nil>>
                 ;

Get_Index        : Object "[" Expression "]"                            <<_rt.MakeGetListItem(c($0), c($2)), nil>>
                 ;

Assign           : Variable "=" Expression                              <<_rt.MakeSetVariable($0.(*token.Token).Lit, c($2)), nil>>
                 | Object "[" Expression "]" "=" Expression             <<_rt.MakeSetListItem(c($0), c($2), c($5)), nil>>
                 ;

Expression       : Bool_Expr                                            <<$0, nil>>
                 | Assign                                               <<$0, nil>>
                 | Lambda_Def                                           <<$0, nil>>
                 ;

Values           : Values "," Expression                                <<_rt.AddToValues(c($0), c($2)), nil>>
                 | Expression                                           <<_rt.NewValues(c($0)), nil>>
                 ;

ListDef          : "[]"                                                 <<_rt.MakeEmptyList(), nil>>
                 | "[" Values "]"                                       <<_rt.MakeListValues(c($1)), nil>>
                 ;

Fn_Name          : fn_name                                              <<$0, nil>>
                 | cust_fn_name                                         <<$0, nil>>
                 ;

Fn_Call          : Fn_Name "()"                                         <<_rt.CallFunction($0.(*token.Token).Lit, nil)>>
                 | Fn_Name "(" Values ")"                               <<_rt.CallFunction($0.(*token.Token).Lit, c($2))>>
                 ;

Lambda_Call      : Callable_Object "(" Values ")"                       <<_rt.MakeCallLambda(c($0), c($2)), nil>>
                 ;

Method_Call      : Object "." fn_name
                 | Object "." Fn_Call
                 ;

CodeBlock        : "{" Statements "}"                                   <<$1, nil>>
                 ;


Func_Param_Def   : Func_Param_Def "," Variable                          <<_rt.AddToParamDef($0.([]string), $2.(*token.Token).Lit), nil>>
                 | Variable                                             <<_rt.NewParamDef($0.(*token.Token).Lit), nil>>
                 ;

Cust_Fn_def      : "function" cust_fn_name ":" Func_Param_Def CodeBlock <<_rt.MakeCustFuncDev($1.(*token.Token).Lit, $3.([]string), c($4))>>
                 ;

Statement        : Expression                                           <<$0, nil>>
                 | "return" Expression
                 ;

Single_Statement : Statement ";"                                        <<$0, nil>>
                 | Block                                                <<$0, nil>>
                 | Cust_Fn_def                                          <<$0, nil>>
                 ;

Statements       : Single_Statement Statements                          <<_rt.MakeStatements(c($0), c($1)), nil>>
                 | Single_Statement                                     <<$0, nil>>
                 | Statement                                            <<$0, nil>>
                 ;

IfBlock          : "if" Expression CodeBlock "else" CodeBlock           <<_rt.MakeIfThenElse(c($1), c($2), c($4)), nil>>
                 | "if" Expression CodeBlock                            <<_rt.MakeIfThenElse(c($1), c($2), nil), nil>>
                 ;

WhileLoop        : "while" Expression CodeBlock                         <<_rt.MakeWhileLoop(c($1), c($2)), nil>>
                 ;

ForEachLoop      : "foreach" Variable "in" Expression CodeBlock         <<_rt.MakeForEach($1.(*token.Token).Lit, c($3), c($4)), nil>>
                 ;

Block            : IfBlock                                              <<$0, nil>>
                 | WhileLoop                                            <<$0, nil>>
                 | ForEachLoop                                          <<$0, nil>>
                 ;

Lambda_Def       : "function" Func_Param_Def "->" Statement             <<_rt.MakeLambda($1.([]string), c($3)), nil>>
                 ;
